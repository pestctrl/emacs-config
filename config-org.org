#+PROPERTY: header-args :tangle "~/.emacs.d/config-org.el" :comments both

* Plugins
** fstree
#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path
               "~/.emacs.d/submodule/org-fstree")
  (require 'org-fstree)
#+END_SRC
** org-bullets
#+BEGIN_SRC emacs-lisp#
(use-package org-bullets)
(when (not (eq system-type 'windows-nt))
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC
** calfw-org
#+BEGIN_SRC emacs-lisp
  (use-package calfw)
  (use-package calfw-ical)
  (use-package calfw-gcal)
  (use-package calfw-org)
  (global-set-key (kbd "C-c A") 'cfw:open-org-calendar)
  (setq cfw:org-overwrite-default-keybinding t)
#+END_SRC
** sync with google calendar
#+BEGIN_SRC emacs-lisp
  (defvar url-http-method)
  (defvar url-http-data)
  (defvar url-http-extra-headers)
  (defvar oauth--token-data)
  (defvar url-callback-function)

  (require 'url-http)
  (unless (package-installed-p 'org-caldav)
    (use-package oauth2)
    (use-package org-caldav))
  (setq epa-pinentry-mode 'loopback)
  (setq plstore-cache-passphrase-for-symmetric-encryption t)

  (save-excursion
    (let ((filename "~/.emacs.d/google-calendar-secret.el"))
      (when (file-exists-p filename)
        (set-buffer (find-file-noselect filename))
        (let ((var (eval (read (buffer-string)))))
          (setq org-caldav-oauth2-client-id (car var)
                org-caldav-oauth2-client-secret (cadr var)))
        (kill-buffer))))

  ;; (setq org-caldav-url 'google
  ;;       org-caldav-calendar-id "jqeua8pamjrclakq3bg8mpnlis@group.calendar.google.com"
  ;;       org-caldav-inbox "~/MEGA/org/agenda/test.org"
  ;;       org-caldav-files '("~/MEGA/org/agenda/agenda.org")
  ;;       org-icalendar-include-todo nil
  ;;       org-icalendar-include-sexps t
  ;;       org-icalendar-categories '(all-tags category)
  ;;       org-icalendar-use-deadline '(event-if-todo event-if-not-todo todo-due)
  ;;       org-icalendar-use-scheduled '(event-if-todo event-if-not-todo todo-start)
  ;;       org-icalendar-with-timestamps nil
  ;;       org-caldav-delete-org-entries 'never)

  (setq org-caldav-url "https://99.57.234.31/remote.php/dav/calendars/bchu"
        org-caldav-calendar-id "orgmode"
        org-caldav-inbox "~/MEGA/org/agenda/test.org"
        org-caldav-files '("~/MEGA/org/agenda/agenda.org" "~/MEGA/org/agenda/classes_caldav_workaround.org"))

  (setq org-icalendar-alarm-time 30
        org-icalendar-include-todo nil
        org-icalendar-include-sexps t
        org-icalendar-categories '(all-tags category)
        org-icalendar-use-deadline '(event-if-todo event-if-not-todo todo-due)
        org-icalendar-use-scheduled '(todo-start event-if-todo)
        org-icalendar-with-timestamps nil
        org-caldav-delete-org-entries 'never)

  (setq org-caldav-skip-conditions '(nottodo ("TODO" "NEXT"))
        org-caldav-exclude-tags '("ARCHIVE" "_nosync_"))
#+END_SRC
** Reveal.js
#+begin_src emacs-lisp#
  (use-package org-re-reveal)
  (setq org-re-reveal-root "file:///home/benson/.reveal.js")
#+end_src
*** Old ox-reveal package
#+BEGIN_SRC emacs-lisp#
  (add-to-list 'load-path
               "~/.emacs.d/submodule/org-reveal")
  (require 'ox-reveal)
  (setq org-reveal-root "file:///home/benson/.reveal.js")
  (setq org-structure-template-alist (remove-if (lambda (c) (string= (car c) "n")) org-structure-template-alist))
#+END_SRC
** org-protocol
#+BEGIN_SRC emacs-lisp
  (require 'org-protocol)
#+END_SRC
** org-timeline
#+BEGIN_SRC emacs-lisp
  (use-package org-timeline)
  (remove-hook 'org-agenda-finalize-hook 'org-timeline-insert-timeline)
#+END_SRC
** Code-blocks
#+BEGIN_SRC emacs-lisp
  (require 'ob-core)
  (require 'ob-clojure)
  (require 'ob-plantuml)
  (use-package plantuml-mode)

  (setq org-babel-clojure-backend 'cider)
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((clojure . t)
     (plantuml . t)))

  (defun my-org-confirm-babel-evaluate (lang body)
    (not (member lang '("plantuml"))))

  (setq org-confirm-babel-evaluate 'my-org-confirm-babel-evaluate)
  (setq org-plantuml-jar-path "/usr/share/java/plantuml/plantuml.jar")
#+END_SRC
** org-super-agenda
#+begin_src emacs-lisp
  (use-package org-super-agenda)
  (org-super-agenda-mode)
#+end_src
** helm-org-rifle
#+begin_src emacs-lisp
  (use-package helm-org-rifle)
  (global-set-key (kbd "C-c o r") 'helm-org-rifle)
  (setq helm-org-rifle-test-against-path t)
#+end_src
* org-agenda base folder
#+begin_src emacs-lisp
  (defconst my/org-folder "~/MEGA/org")
  (defconst my/agenda-folder (expand-file-name "2019-05-agenda" my/org-folder))

  (defun my/org-file (str)
    (expand-file-name str my/org-folder))
  (defun my/agenda-file (str)
    (expand-file-name str my/agenda-folder))
#+end_src
* Keybindings
#+begin_src emacs-lisp
  (use-package org)
  (require 'org-agenda)

  (global-set-key "\C-cl" 'org-store-link)
  (global-set-key "\C-cc" 'org-capture)
  (global-set-key (kbd "<f5>") 'org-agenda)
  (global-set-key (kbd "C-x C-o") 'org-agenda)
  (define-key org-agenda-mode-map (kbd "a") 'org-agenda)

  (setq org-src-window-setup 'current-window)

  (setq org-list-allow-alphabetical t)  

  ;; This is for safety
  (define-key org-mode-map (kbd "C-S-<backspace>") 
    (lambda (arg)
      (interactive "P")
      (if (string= "yes" (completing-read "Are you sure you want to use that keybinding? " '("yes" "no")))
          (kill-whole-line arg)
        (org-cut-subtree))))
#+end_src
* count archive tree characters
#+begin_src emacs-lisp
  (defun my/org-count-subtree-characters ()
    (interactive)
    (save-window-excursion
      (org-agenda-goto t)
      (org-mark-subtree)
      (message (format "This subtree has %d characters. " (- (region-end) (region-beginning))))))

  (define-key org-agenda-mode-map (kbd "C") #'my/org-count-subtree-characters)
#+end_src

* My Template
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist
               '("sv" . "src :results value"))
  (add-to-list 'org-structure-template-alist
               '("so" . "src :results output"))
#+END_SRC
* Face
#+BEGIN_SRC emacs-lisp
  (when (and (not (eq system-type 'windows-nt))
             (find-font (font-spec :name "Font Awesome 5 Free")))
    (setq org-ellipsis " ï„‡"))
#+END_SRC
* Variables
#+begin_src emacs-lisp
  (setq org-log-done 'time)
  (setq org-agenda-window-setup 'current-window)
  (setq org-agenda-restore-windows-after-quit t)

  (setq org-agenda-sticky t)

  ;;(org-agenda-load-file-list)

  ;; Targets include this file and any file contributing to the agenda - up to 9 levels deep
  (setq org-refile-targets `((nil :maxlevel . 9)
                             (my/all-agenda-files :maxlevel . 9)
                             ("~/MEGA/org/entries/panic.org" :maxlevel . 9)))

  (setq org-refile-use-cache t)

  (setq org-refile-target-verify-function
        (lambda () 
          (let ((tags (org-get-tags-at)))
            (and (not (member "ARCHIVE" tags))
                 (not (equal "DONE" (org-get-todo-state)))))))

  (setq org-agenda-show-future-repeats nil)

  ;; Use full outline paths for refile targets - we file directly with IDO
  (setq org-refile-use-outline-path 'file)

  ;; Targets complete directly with IDO
  (setq org-outline-path-complete-in-steps nil)

  ;; Allow refile to create parent tasks with confirmation
  (setq org-refile-allow-creating-parent-nodes (quote confirm))

  ;; Use the current window for indirect buffer display
  (setq org-indirect-buffer-display 'current-window)

  ;; Do not dim blocked tasks
  (setq org-agenda-dim-blocked-tasks nil)

  (setq org-agenda-compact-blocks t)
#+end_src
* Tag hierarchy
#+begin_src emacs-lisp
  (setq org-tag-alist
        '((:startgrouptag)
          ("all" . nil)
          (:grouptags)
          ("time" . nil)
          ("nontime" . nil)
          (:endgrouptag)
          (:startgrouptag)
          ("time" . nil)
          (:grouptags)
          ("prod" . ?1)
          (:endgrouptag)
          (:startgrouptag)
          ("nontime" . nil)
          (:grouptags)
          ("sandbox" . ?3)
          (:endgrouptag)
          (:startgrouptag)
          ("sandbox" . ?3)
          (:grouptags)
          ("dev" . ?2)
          ("people" . nil)
          (:endgrouptag)
          (:startgroup . nil)
          ("short" . ?s)
          ("long" . ?l)
          (:endgroup . nil)
          (:startgroup . nil)
          ("watch" . ?w)
          ("read" . ?r)
          (:endgroup . nil)
          (:startgroup . nil)
          ("grow" . ?g)
          ("rest" . ?R)
          (:endgroup . nil)
          (:startgroup . nil)
          ("active" . ?a)
          ("idle" . ?i)
          (:endgroup . nil)
          ;; (:startgrouptag)
          ;; ("online")
          ;; (:grouptags)
          ;; ("article")
          ;; (:endgrouptag)
          ;; (:startgrouptag)
          ;; ("read")
          ;; (:grouptags)
          ;; ("article")
          ;; (:endgrouptag)
          (:startgrouptag)
          ("active")
          (:grouptags)
          ("prog")
          (:endgrouptag)
          (:startgrouptag)
          ("people" . nil)
          (:grouptags)
          ("family" . nil)
          (:endgrouptag)
          ))


  (setq org-agenda-hide-tags-regexp
        (mapconcat #'identity (list "time" "nontime" "prod" "dev" "sandbox"
                                    "refile"
                                    "short" "long" "watch" "read" "grow" "rest" "active" "idle")
                   "\\|"))

  (defconst category-tags '("computers"))
#+end_src
* More alternative views
#+begin_src emacs-lisp
  (defun cfw:open-org-calendar-no-projects (&args)
    "Open an org schedule calendar in the new buffer."
    (interactive)
    (save-excursion
      (let ((buf (get-buffer "*cfw-calendar*")))
        (if buf
            (switch-to-buffer buf)
          (let* ((org-agenda-skip-function 'my/agenda-custom-skip)
                 (source1 (cfw:org-create-source))
                 (curr-keymap (if cfw:org-overwrite-default-keybinding cfw:org-custom-map cfw:org-schedule-map))
                 (cp (cfw:create-calendar-component-buffer
                      :view 'two-weeks
                      :contents-sources (list source1)
                      :custom-map curr-keymap
                      :sorter 'cfw:org-schedule-sorter)))
            (switch-to-buffer (cfw:cp-get-buffer cp))
            (set (make-variable-buffer-local 'org-agenda-skip-function)
                 'my/agenda-custom-skip)
            (when (not org-todo-keywords-for-agenda)
              (message "Warn : open org-agenda buffer first.")))
          ))))
#+end_src
* Stuff                                                                 :FIX:
#+begin_src emacs-lisp#
    (setq org-agenda-tags-todo-honor-ignore-options t)

    (defun bh/org-auto-exclude-function (tag)
      "Automatic task exclusion in the agenda with / RET"
      (when (string= tag "online")
        (concat "-" tag)))

    (org-defkey org-agenda-mode-map
                "A"
                'org-agenda)

    (setq org-agenda-auto-exclude-function 'bh/org-auto-exclude-function)
    (setq org-agenda-skip-deadline-prewarning-if-scheduled 'pre-scheduled)
    (setq org-agenda-skip-scheduled-if-deadline-is-shown nil)
    (setq org-agenda-log-mode-items '(clock closed))

    (defun org-agenda-add-separater-between-project ()
      (setq buffer-read-only nil)
      (save-excursion
        (goto-char (point-min))
        (let ((start-pos (point))
              (previous t))
          (re-search-forward " +agenda: +[^\\. ]" nil t)
          (while (re-search-forward " +agenda: +[^\\. ]" nil t)
            (beginning-of-line)
            (insert "=============================================\n")
            (forward-line)))))

    ;; I don't think this code is necessary
    ;; (add-to-list 'org-agenda-entry-types :deadlines*)

    (setq org-agenda-hide-tags-regexp "NOT_TASKS\\|PROJECT")

    (use-package htmlize)
    (org-super-agenda-mode)
    (setq org-super-agenda-header-separator "")
#+end_src
* Checkbox hack
#+BEGIN_SRC emacs-lisp
  (defun my/org-checkbox-todo ()
    "Switch header TODO state to DONE when all checkboxes are ticked, to TODO otherwise"
    (let ((todo-state (org-get-todo-state)) beg end)
      (unless (not todo-state)
        (save-excursion
          (org-back-to-heading t)
          (setq beg (point))
          (end-of-line)
          (setq end (point))
          (goto-char beg)
          (if (re-search-forward "\\[\\([0-9]*%\\)\\]\\|\\[\\([0-9]*\\)/\\([0-9]*\\)\\]"
                                 end t)
              (if (match-end 1)
                  (if (equal (match-string 1) "100%")
                      (unless (string-equal todo-state "DONE")
                        (org-todo 'done))
                    (unless (string-equal todo-state "TODO")
                      (org-todo 'todo)))
                (if (and (> (match-end 2) (match-beginning 2))
                         (equal (match-string 2) (match-string 3)))
                    (unless (string-equal todo-state "DONE")
                      (org-todo 'done))
                  (unless (string-equal todo-state "TODO")
                    (org-todo 'todo)))))))))

  (add-hook 'org-checkbox-statistics-hook 'my/org-checkbox-todo)
#+END_SRC
* View org files
#+BEGIN_SRC emacs-lisp
  (defun make-org-file (filename)
    "Make an org buffer in folder for all new incoming org files"
    (interactive "MName: ")
    (switch-to-buffer (find-file-noselect (concat "~/MEGA/org/random/" filename ".org"))))

  (defun make-encrypted-org-file (filename) 
    (interactive "MName: ")
    (switch-to-buffer (find-file-noselect (concat "~/MEGA/org/random/" filename ".gpg")))
    (insert "# -*- mode:org; epa-file-encrypt-to: (\"bensonchu457@gmail.com\") -*-\n\n")
    (org-mode))


  (defun view-org-files ()
    "Convenient way for openning up org folder in dired"
    (interactive)
    (dired "~/MEGA/org/"))
#+END_SRC
* Parallel org-tags-views
#+begin_src emacs-lisp
  ;; TODO
#+end_src
* empty lines
#+begin_src emacs-lisp
  (setq org-cycle-separator-lines 0)
#+end_src
* invisibel
#+begin_src emacs-lisp
  (setq org-catch-invisible-edits 'show-and-error)
#+end_src
* link abbreviation
#+begin_src emacs-lisp
  (setq org-link-abbrev-alist 
        '(("youtube" . "https://youtube.com/watch?v=")))
#+end_src
* refile to datetree
#+begin_src emacs-lisp
  (defun my/org-read-datetree-date (d)
    "Parse a time string D and return a date to pass to the datetree functions."
    (let ((dtmp (nthcdr 3 (parse-time-string d))))
      (list (cadr dtmp) (car dtmp) (caddr dtmp))))

  (defun my/org-refile-to-archive-datetree (&optional bfn)
    "Refile an entry to a datetree under an archive."
    (interactive)
    (require 'org-datetree)
    (let* ((org-read-date-prefer-future nil)
           (bfn (or bfn (find-file-noselect (expand-file-name (my/agenda-file "datetree.org")))))
           (datetree-date (my/org-read-datetree-date (org-read-date t nil))))
      (org-refile nil nil (list nil (buffer-file-name bfn) nil
                                (with-current-buffer bfn
                                  (save-excursion
                                    (org-datetree-find-date-create datetree-date)
                                    (point))))))
    (setq this-command 'my/org-refile-to-journal))
#+end_src
* org-link use qutebrowser
#+begin_src emacs-lisp
  (defun my/browse-url-qutebrowser (url &optional new-window)
    (interactive)
    (start-process (concat "qutebrowser " url)
                   nil
                   "qutebrowser"
                   url))

  ;;(setq browse-url-browser-function #'my/browse-url-qutebrowser)
  (setq browse-url-browser-function #'browse-url-firefox)
#+end_src
* convert orgzly scheduled timestamps to created
#+begin_src emacs-lisp
  (defun my/scheduled-to-created ()
    (when-let (time (org-get-scheduled-time (point)))
      (let ((ts (format-time-string "[%Y-%m-%d %a]" time)))
        (org-schedule '(4))
        (org-set-property "CREATED" ts))))


  (defun my/convert-orgzly-scheduled-to-created ()
    (interactive)
    (while (progn
             (my/scheduled-to-created)
             (outline-next-heading))))
#+end_src
* new stuff
** org-mru-clock
#+begin_src emacs-lisp
  (use-package org-mru-clock)
#+end_src
** org-clock-convenience
#+begin_src emacs-lisp
  (defun my/org-clock-move-to-other ()
    (interactive)
    (forward-char 6)
    (while (condition-case nil
               (progn 
                 (previous-line)
                 (org-clock-convenience-goto-ts)
                 nil)
             (error t))))

  (defun my/org-clock-move-up ()
    (interactive)
    (org-clock-convenience-timestamp-up)
    (my/org-clock-move-to-other)
    (org-clock-convenience-timestamp-up))

  (use-package org-clock-convenience
    :ensure t
    :bind (:map org-agenda-mode-map
                ("<S-up>" . org-clock-convenience-timestamp-up)
                ("<S-down>" . org-clock-convenience-timestamp-down)
                ("<S-M-up>" . org-clock-convenience-timestamp-up)
                ("<S-M-down>" . org-clock-convenience-timestamp-down)
                ("Ã¶" . org-clock-convenience-fill-gap)
                ("Ã©" . org-clock-convenience-fill-gap-both)))
#+end_src
** org-clock-consisitency
#+begin_src emacs-lisp
  (setq org-agenda-clock-consistency-checks
        '(:max-duration "10:00"
                        :min-duration 0
                        :max-gap 0
                        :gap-ok-around ("4:00")
                        ;; :default-face ((:background "DarkRed")
                        ;;                (:foreground "white"))
                        ;; :overlap-face nil
                        ;; :gap-face ((:background "DarkRed")
                        ;;            (:foreground "white"))
                        ;; :no-end-time-face nil
                        ;; :long-face nil
                        ;; :short-face nil
                        ))
#+end_src
** org-clock stuff
#+begin_src emacs-lisp
  (org-clock-persistence-insinuate)
  (setq org-clock-in-resume t)
  (setq org-clock-mode-line-total 'today)
  (setq org-clock-persist t)
  (org-clock-persistence-insinuate)
  (setq org-clock-continuously t)
#+end_src
** org-edna
#+begin_src emacs-lisp
  (use-package org-edna)
  (org-edna-load)
#+end_src
** org agenda goto headline AND narrow
#+begin_src emacs-lisp
  (defun my/org-agenda-narrow ()
    (interactive)
    (org-agenda-switch-to)
    (org-narrow-to-subtree)
    (outline-show-branches))
  (define-key org-agenda-mode-map (kbd "S-<return>") 'my/org-agenda-narrow)
#+end_src


** org-brain
#+begin_src emacs-lisp
  (use-package org-brain :ensure t
    :init
    (global-set-key (kbd "M-'") 'org-brain-visualize)
    (setq org-brain-path "~/MEGA/org/brain/")
    ;; For Evil users
    (with-eval-after-load 'evil
      (evil-set-initial-state 'org-brain-visualize-mode 'emacs))
    :config
    (setq org-id-track-globally t)
    (setq org-id-locations-file "~/.emacs.d/.org-id-locations")
    (push '("b" "Brain" plain (function org-brain-goto-end)
            "* %i%?" :empty-lines 1)
          org-capture-templates)
    (setq org-brain-visualize-default-choices 'all)
    (setq org-brain-title-max-length 0)
    (define-key org-brain-visualize-mode-map (kbd "^") 'org-brain-visualize-back))
#+end_src
** Open links with firefox
#+begin_src emacs-lisp
  (setq browse-url-browser-function 'browse-url-firefox)
#+end_src
** org-export
#+begin_src emacs-lisp
  (require 'ox-latex)
  (require 'ox-beamer)
#+end_src

** org-jira
#+BEGIN_SRC emacs-lisp
  (use-package org-jira)
  (setq jiralib-url "https://wenningbai.atlassian.net/")
#+END_SRC
** org-board
#+begin_src emacs-lisp
  (use-package org-board)
  (add-to-list 'org-board-agent-header-alist
               '("Linux" . "--user-agent=\"Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.8.1.6) Gecko/20070802 SeaMonkey/1.1.4\""))
  (setq org-board-wget-show-buffer nil)
#+end_src
** org-now
#+begin_src emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/submodule/org-now")
  (require 'org-now)
  (setq org-now-location
        nil)
#+end_src
* org-use-speed-commands
#+begin_src emacs-lisp
  (setq org-use-speed-commands t)
#+end_src
* new headline set property
#+begin_src emacs-lisp
  (defun my/org-set-created-property (&rest args)
    (when-let (f (buffer-file-name))
      (let ((fname (expand-file-name f)))
        (when (remove-if-not (lambda (x) (string= fname (expand-file-name x))) org-agenda-files)
          (let ((ts (format-time-string "[%Y-%m-%d %a %H:%M]")))
            (org-set-property "CREATED" ts))))))

  (advice-add #'org-insert-heading
              :after
              #'my/org-set-created-property)
#+end_src
* Code for deleting empty blocks
#+begin_src emacs-lisp
  (defvar my/delete-blocks t)

  (defun org-agenda-delete-empty-compact-blocks ()
    "Function removes empty compact blocks. 
   If two lines next to each other have the 
   org-agenda-structure face, then delete the 
   previous block."
    (unless org-agenda-compact-blocks
      (user-error "Compact blocks must be on"))
    (when my/delete-blocks
      (setq buffer-read-only nil)
      (save-excursion
        (goto-char (point-min))
        (let ((start-pos (point))
              (previous nil))
          (while (not (eobp))
            (cond
             ((let ((face (get-char-property (point) 'face)))
                (or (eq face 'org-agenda-structure)
                    (eq face 'org-agenda-date-today)))
              (if previous
                  (delete-region start-pos
                                 (point))
                (setq start-pos (point)))
              (unless (org-agenda-check-type nil 'agenda)
                (setq previous t)))
             (t (setq previous nil)))
            (forward-line))))))

  (add-hook 'org-agenda-finalize-hook #'org-agenda-delete-empty-compact-blocks)
#+end_src
* org-mode faces
#+begin_src emacs-lisp
  (set-face-attribute 'org-agenda-date-today nil :inherit 'org-agenda-date :foreground "cyan" :slant 'italic :weight 'bold :height 1.1)
  (set-face-attribute 'org-agenda-structure  nil :foreground "LightSkyBlue" :box '(:line-width 1 :color "grey75" :style released-button))
  (set-face-attribute 'org-ellipsis          nil :foreground "turquoise" :underline nil)
#+end_src
* org-notmuch
#+begin_src emacs-lisp
  (require 'ol-notmuch)
#+end_src
* remove inherited tags
#+begin_src emacs-lisp
  (defun my/org-remove-inherited-tag-strings ()
    "Removes inherited tags from the headline-at-point's tag string.
  Note this does not change the inherited tags for a headline,
  just the tag string."
    (interactive)
    (org-set-tags (seq-remove (lambda (tag)
                                (get-text-property 0 'inherited tag))
                              (org-get-tags))))

  (defun my/org-clean-tags ()
    "Visit last refiled headline and remove inherited tags from tag string."
    (save-window-excursion
      (org-refile-goto-last-stored)
      (my/org-remove-inherited-tag-strings)))

  (defun my/org-refile-preserve-tags (orig &rest args)
    (let ((tags (org-get-tags)))
      (apply orig args)))

  (add-hook 'org-after-refile-insert-hook 'my/org-clean-tags)
#+end_src
* archive sibling remove sub archive sibling
#+begin_src emacs-lisp
  (defun my/org-un-project ()
    (interactive)
    (let ((level (org-current-level)))
      (org-map-entries 'org-do-promote (format "LEVEL>%d" level) 'tree)
      (org-cycle t)))

  (defun my/org-delete-promote ()
    (interactive)
    (my/org-un-project)
    (org-cut-subtree))

  (defun my/is-archive-tree ()
    (and (string= "Archive"
                  (org-get-heading t t t t))
         (member "ARCHIVE" (org-get-tags))))

  (defun my/archive-remove-all-sibling (&rest args)
    (save-excursion
      (let (points)
        (ol/descendants
          (when (my/is-archive-tree)
            (push (point) points)))
        (mapcar (lambda (p)
                  (goto-char p)
                  (my/org-delete-promote))
                points))))

  (advice-add #'org-archive-to-archive-sibling
              :before
              #'my/archive-remove-all-sibling)
#+end_src
* org agenda start on saturday
#+begin_src emacs-lisp
  (setq org-agenda-start-on-weekday 6)
#+end_src
* org mode startup
#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (setq org-startup-indented t) ; Enable `org-indent-mode' by default
    (add-hook 'org-mode-hook #'visual-line-mode)
    (add-hook 'org-mode-hook #'auto-fill-mode))
#+end_src

* Learning chinese, setup org-drill
#+begin_src emacs-lisp
  (use-package org-drill)

  (defun org-drill-present-one-side-always (session)
    (org-drill-with-hidden-comments
     (org-drill-with-hidden-cloze-hints
      (org-drill-with-hidden-cloze-text
       (let ((drill-sections (org-drill-hide-all-subheadings-except nil)))
         (when drill-sections
           (save-excursion
             (goto-char (nth 0 drill-sections))
             (org-show-subtree)))
         (org-drill--show-latex-fragments)
         (ignore-errors
           (org-display-inline-images t))
         (org-cycle-hide-drawers 'all)
         (prog1 (org-drill-presentation-prompt session)
           (org-drill-hide-subheadings-if 'org-drill-entry-p)))))))

  (add-to-list 'org-drill-card-type-alist
               '("oneside" org-drill-present-one-side-always nil t))

  ;; (pop org-drill-card-type-alist)
#+end_src
* Plan module
#+begin_src emacs-lisp
  (add-to-list 'org-capture-templates
               `("P" "The Plan" entry (file+headline ,(my/agenda-file "dev.org") "The plan")
                 (file ,(my/org-file "templates/daily-plan.org"))))
#+end_src

* My org-indent look
#+begin_src emacs-lisp
  (defun my/org-indent-prefixes ()
    "Compute prefix strings for regular text and headlines."
    (setq org-indent--heading-line-prefixes
          (make-vector org-indent--deepest-level nil))
    (setq org-indent--inlinetask-line-prefixes
          (make-vector org-indent--deepest-level nil))
    (setq org-indent--text-line-prefixes
          (make-vector org-indent--deepest-level nil))
    (dotimes (n org-indent--deepest-level)
      (let ((indentation (if (<= n 1) 0
                           (* (1- org-indent-indentation-per-level)
                              (1- n)))))
        ;; Headlines line prefixes.
        (let ((heading-prefix ""))
          (aset org-indent--heading-line-prefixes
                n
                (org-add-props heading-prefix nil 'face 'org-indent))
          ;; Inline tasks line prefixes
          (aset org-indent--inlinetask-line-prefixes
                n
                (cond ((<= n 1) "")
                      ((bound-and-true-p org-inlinetask-show-first-star)
                       (concat org-indent-inlinetask-first-star
                               (substring heading-prefix 1)))
                      (t (org-add-props heading-prefix nil 'face 'org-indent)))))
        ;; Text line prefixes.
        (aset org-indent--text-line-prefixes
              n
              (org-add-props
                  (concat (make-string (if (< n 2) n
                                         (1+ indentation)) ?\s)
                          (and (> n 0)
                               (char-to-string org-indent-boundary-char)))
                  nil 'face 'org-indent)))))


  (advice-add #'org-indent--compute-prefixes
              :override
              #'my/org-indent-prefixes)
#+end_src

* Insert inactive timestamp after last org-datetree--find-create
#+begin_src emacs-lisp
  (defun org-datetree--find-create-add-timestamp (regex-template year &optional month day insert)
    (save-excursion
      (when day
        (let ((lnum (line-number-at-pos)))
          (next-line)
          (when (= lnum (line-number-at-pos))
            (end-of-line)
            (insert "\n")))
        (unless (looking-at-p (rx "[" (repeat 4 digit) "-" (repeat 2 digit) "-"
                                  (repeat 2 digit) " " (repeat 3 alpha) "]"))
          (insert (format-time-string "[%Y-%m-%d %a]"))))))

  (advice-add #'org-datetree--find-create
              :after
              #'org-datetree--find-create-add-timestamp)
#+end_src

* repeat to previous state
#+begin_src emacs-lisp
  (setq org-todo-repeat-to-state t)
#+end_src
* I'm bored
#+begin_src emacs-lisp
  (defun im-bored ()
    (interactive)
    (org-ql-search (append org-agenda-files
                           (list (my/agenda-file "when_im_bored.org")
                                 (my/agenda-file "eternal.org")))
      '(and (tags-local "bored"))))
#+end_src
* org-noter
#+begin_src emacs-lisp
  (use-package org-noter)
  (when (featurep 'exwm)
    (setq org-noter-always-create-frame nil))

  (def-face-copier x-show-tip-faces (sym)
    nil
    tooltip)

  (defun dont-copy-faces-for-x-show-tip (orig &rest args)
    (override1-face x-show-tip-faces
      (apply orig args)))

  (advice-add #'x-show-tip
              :around
              #'dont-copy-faces-for-x-show-tip)
#+end_src
* turn into tickle
#+begin_src emacs-lisp
  (defun my/tickle-todo ()
    (interactive)
    (org-agenda-todo "TICKLER")
    (org-agenda-schedule))

  (define-key org-agenda-mode-map (kbd "T") #'my/tickle-todo)
#+end_src
* org-src dont ask
#+begin_src emacs-lisp
  (setq org-src-ask-before-returning-to-edit-buffer
        nil)
#+end_src
* olivetti
#+begin_src emacs-lisp
  (use-package olivetti
    :commands olivetti-mode
    :config
    (setq-default olivetti-body-width 120))
#+end_src
* org-wiki
#+begin_src emacs-lisp
  (require 'org-wiki)
  (setq org-wiki-location-list
        '("~/MEGA/org/wiki"))

  (setq org-wiki-template
        "#+TITLE: %n\n#+DESCRIPTION:\n#+KEYWORDS:\n#+STARTUP:  content\n\n\n- Related: \n\n* Backlinks\n#+STARTUP: folded\n\n* %n\n")

  (defun org-wiki-insert-backlink (back-from back-to)
    (let ((wiki-link (format "[[wiki:%s][%s]]"
                             back-to back-to))
          (file (save-window-excursion (org-wiki--open-page back-from)
                                       (current-buffer))))
      (with-current-buffer file
        (beginning-of-buffer)
        (when (not (save-excursion
                     (search-forward wiki-link nil t)))
          (search-forward "* Backlinks")
          (forward-line 2)
          (beginning-of-line)
          (insert "- " wiki-link "\n")
          (save-buffer)))))


  (defun my/org-wiki-insert-new ()
    (interactive)
    (let ((page-name (read-string  "Page: ")))
      (save-excursion (insert (org-make-link-string (concat "wiki:" page-name)
                                                    page-name
                                                    )))
      (org-wiki-insert-backlink
       page-name
       (org-wiki--current-page))))

  (advice-add #'org-wiki-insert-new
              :override
              #'my/org-wiki-insert-new)

  (defun my/org-wiki-insert-link ()
    "Insert a Wiki link at point for a existing page."
    (interactive)
    (org-wiki--helm-selection
     (lambda (page)
       (insert (org-wiki--make-link page))
       (org-wiki-insert-backlink
        page
        (org-wiki--current-page)))))

  (advice-add #'org-wiki-insert-link
              :override
              #'my/org-wiki-insert-link)
#+end_src
* org-roam
** Roam itself
#+begin_src emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  (use-package org-roam
    :after org
    :hook 
    (after-init . org-roam-mode)
    :straight (:host github :repo "jethrokuan/org-roam" :branch "develop")
    :custom
    (org-roam-directory "~/big_files/MEGA/org/org-roam/")
    :bind (:map org-roam-mode-map
                (("C-c n l" . org-roam)
                 ("C-c n f" . org-roam-find-file)
                 ("C-c n g" . org-roam-show-graph)
                 ("C-c n t" . org-roam-today))
                :map org-mode-map
                (("C-c n i" . org-roam-insert))))

  (org-roam-mode t)
#+end_src
** Deft
#+begin_src emacs-lisp
  (use-package el-patch
    :straight (:host github
                     :repo "raxod502/el-patch"
                     :branch "develop"))

  (eval-when-compile
    (require 'el-patch))

  (use-package deft
    :after org
    :bind
    ("C-c n d" . deft)
    :custom
    (deft-recursive t)
    (deft-use-filter-string-for-filename t)
    (deft-default-extension "org")
    (deft-directory "~/big_files/MEGA/org/org-roam/")
    :config/el-patch
    (defun deft-parse-title (file contents)
      "Parse the given FILE and CONTENTS and determine the title.
  If `deft-use-filename-as-title' is nil, the title is taken to
  be the first non-empty line of the FILE.  Else the base name of the FILE is
  used as title."
      (el-patch-swap (if deft-use-filename-as-title
                         (deft-base-filename file)
                       (let ((begin (string-match "^.+$" contents)))
                         (if begin
                             (funcall deft-parse-title-function
                                      (substring contents begin (match-end 0))))))
                     (org-roam--get-title-or-slug file))))
#+end_src
* Variable pitch org-mode
#+begin_src emacs-lisp
  ;; (mapcar
  ;;  (lambda (face)
  ;;    (set-face-attribute face nil :inherit 'fixed-pitch))
  ;;  '(org-block org-block-begin-line org-block-end-line org-code
  ;;              org-document-info-keyword org-done org-formula org-indent
  ;;              org-meta-line org-special-keyword org-table org-todo
  ;;              org-verbatim org-date org-drawer))
#+end_src
* Ediffing with org mode
#+begin_src emacs-lisp
  (with-eval-after-load 'outline
    (add-hook 'ediff-prepare-buffer-hook #'org-show-all))
#+end_src
* ctrl-k
#+begin_src emacs-lisp
(setq org-ctrl-k-protect-subtree t)
#+end_src
* Lisp modules
#+begin_src emacs-lisp
(require 'my-org-agenda-commands)
#+end_src
* Restriction from org-agenda
#+begin_src emacs-lisp
  (define-key org-agenda-mode-map (kbd "N") #'(lambda ()
                                                (interactive)
                                                (org-agenda-set-restriction-lock-from-agenda nil)
                                                (org-agenda-redo)))
  (define-key org-agenda-mode-map (kbd "U") #'org-agenda-remove-restriction-lock)
#+end_src
