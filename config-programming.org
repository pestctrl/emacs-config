#+PROPERTY: header-args :tangle "~/.emacs.d/config-programming.el" :comments both

* irony
#+begin_src emacs-lisp
  (use-package irony
    :hook ((c++-mode . irony-mode)
           (c-mode . irony-mode)
           (objc-mode . irony-mode)))

  ;; (add-hook 'c++-mode-hook 'irony-mode)
  ;; (add-hook 'c-mode-hook 'irony-mode)
  ;; (add-hook 'objc-mode-hook 'irony-mode)

  ;; (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)

  ;; (global-company-mode)
#+end_src
* Yasnippets
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet)
  (use-package java-snippets)
  (define-key yas/keymap (kbd "<backtab>") 'yas-expand)
  (yas-global-mode 0)
#+END_SRC
* Projectile and dumb-jump
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :custom
    (projectile-enable-caching t))

  (use-package treemacs-projectile)
  (use-package helm-projectile)
  (use-package counsel-projectile)

  (defun projectile-stop-project-running ()
    (interactive)
    (if-let (buf (get-buffer "*compilation*"))
        (let ((kill-buffer-query-functions nil))
          (kill-buffer buf)
          (delete-window))
      (message "Project is not running")))

  (projectile-global-mode)
  ;; Deprecated?
  (counsel-projectile-mode)

  (ivy-set-occur 'counsel-projectile-switch-to-buffer 'ivy-switch-buffer-occur)

  (cons 'projectile-root-bottom-up
        (remove 'projectile-root-bottom-up
                projectile-project-root-files-functions))
  (setq projectile-indexing-method 'native)
  (setq projectile-completion-system 'ivy)
  (define-key projectile-mode-map (kbd "C-c C-p") 'projectile-command-map)
  (define-key projectile-command-map (kbd "C-a") 'projectile-add-known-project)
  (define-key projectile-command-map (kbd "C-r") 'projectile-remove-known-project)
  (define-key projectile-command-map (kbd "C-f") 'counsel-projectile-find-file)
  (define-key projectile-command-map (kbd "C-b") 'projectile-ibuffer)
  (define-key projectile-command-map (kbd "C-c") 'projectile-compile-project)
  (define-key projectile-command-map (kbd "C-d") 'projectile-stop-project-running)

  (defun this-is-a-project (dir)
    (interactive "f")
    (setq projectile-project-root dir)
    (set (make-local-variable 'dumb-jump-project) dir))

  (define-key projectile-command-map (kbd "C-t") 'this-is-a-project)
  (use-package dumb-jump)
  (dumb-jump-mode)
#+END_SRC
* hs-minor-mode
#+BEGIN_SRC emacs-lisp
  (defun set-hiding-indentation (column)
    (interactive "P")
    (set-selective-display
     (or column
         (unless selective-display
           (1+ (current-column))))))

  (defun set-hiding-indentation-to-point (column)
    (interactive "P")
    (if hs-minor-mode
        (if (condition-case nil
                (hs-toggle-hiding)
              (error t))
            (hs-show-all))
      (set-hiding-indentation column)))

  (global-set-key (kbd "C-=") 'hs-toggle-hiding)
  (global-set-key (kbd "C--") 'set-hiding-indentation-to-point)
  (add-hook 'c-mode-common-hook   'hs-minor-mode)
  (add-hook 'emacs-lisp-mode-hook 'hs-minor-mode)
  (add-hook 'java-mode-hook       'hs-minor-mode)
  (add-hook 'lisp-mode-hook       'hs-minor-mode)
  (add-hook 'perl-mode-hook       'hs-minor-mode)
  (add-hook 'sh-mode-hook         'hs-minor-mode)
#+END_SRC
* Ensime (scala)
#+BEGIN_SRC emacs-lisp
  (use-package ensime)
#+END_SRC
* SPACES
#+BEGIN_SRC emacs-lisp
  (setq TeX-auto-untabify 't)
  (setq indent-tabs-mode nil)
  (add-hook 'java-mode-hook
            (lambda () 
              (setq indent-tabs-mode nil)))
  (add-hook 'clojure-mode
             (lambda ()
              (setq indent-tabs-mode nil)))
#+END_SRC
* Geiser
#+BEGIN_SRC emacs-lisp
  (use-package geiser)
  (setq geiser-default-implementation 'chez)
#+END_SRC
* Paredit
#+BEGIN_SRC emacs-lisp
  (use-package paredit)
#+END_SRC
* Cider
#+BEGIN_SRC emacs-lisp
  (use-package clj-refactor)
  (use-package cider)
  (use-package clojure-mode)
#+END_SRC
* YAML
#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode)
#+END_SRC
* lsp-mode
#+begin_src emacs-lisp
  (use-package flycheck)
  ;; (global-flycheck-mode)

  (add-to-list 'display-buffer-alist
               `(,(rx bos "*Flycheck errors*" eos)
                 (display-buffer-reuse-window
                  display-buffer-in-side-window)
                 (side            . bottom)
                 (reusable-frames . visible)
                 (window-height   . 0.10)))

  (require 'ansi-color)
  (defun colorize-compilation-buffer ()
    (let ((buffer-read-only nil))
      (ansi-color-apply-on-region (point-min) (point-max))))
    ;; (ansi-color-apply-on-region compilation-filter-start (point)))
  (add-hook 'compilation-filter-hook 'colorize-compilation-buffer)

  (use-package lsp-mode)
  (use-package lsp-ui)

  (add-hook 'java-mode-hook
            'lsp)

  (define-key lsp-mode-map (kbd "M-.") 'lsp-ui-peek-find-definitions)
  (define-key lsp-mode-map (kbd "M-?") 'lsp-ui-peek-find-references)
  (define-key lsp-mode-map (kbd "M-,") 'lsp-ui-peek-jump-backward)
  (define-key lsp-mode-map (kbd "M-p") 'lsp-ui-peek-jump-forward)

  (setq lsp-ui-flycheck-enable t)
  (setq lsp-ui-flycheck-live-reporting t)
  (use-package dap-mode
    :config
    (add-hook 'java-mode-hook
              'dap-mode)
    (add-hook 'java-mode-hook
              'dap-ui-mode)
    (define-key dap-mode-map (kbd "C-c h") 'dap-hydra)
    (define-key dap-mode-map (kbd "C-c b") 'dap-breakpoint-toggle)
    (define-key dap-mode-map (kbd "C-c d r") 'dap-java-debug)
    (define-key dap-mode-map (kbd "C-c d m") 'dap-java-debug-test-class)
    (define-key dap-mode-map (kbd "C-c r t") 'mvn-test))

  ;; (defhydra dap-hydra (:color pink :hint nil :foreign-keys run)
  ;;   ;;   "
  ;;   ;; ^Stepping^          ^Switch^                 ^Breakpoints^           ^Eval
  ;;   ;; ^^^^^^^^-----------------------------------------------------------------------------------------
  ;;   ;; _n_: Next           _ss_: Session            _bt_: Toggle            _ee_: Eval
  ;;   ;; _i_: Step in        _st_: Thread             _bd_: Delete            _er_: Eval region
  ;;   ;; _o_: Step out       _sf_: Stack frame        _ba_: Add               _es_: Eval thing at point
  ;;   ;; _c_: Continue       _sl_: List locals        _bc_: Set condition     _eii_: Inspect
  ;;   ;; _r_: Restart frame  _sb_: List breakpoints   _bh_: Set hit count     _eir_: Inspect region
  ;;   ;; _Q_: Disconnect     _sS_: List sessions      _bl_: Set log message   _eis_: Inspect thing at point
  ;;   ;; "
  ;;   ("n" dap-next)
  ;;   ("i" dap-step-in)
  ;;   ("o" dap-step-out)
  ;;   ("c" dap-continue)
  ;;   ("r" dap-restart-frame)
  ;;   ("ss" dap-switch-session)
  ;;   ("st" dap-switch-thread)
  ;;   ("sf" dap-switch-stack-frame)
  ;;   ("sl" dap-ui-locals)
  ;;   ("sb" dap-ui-breakpoints)
  ;;   ("sS" dap-ui-sessions)
  ;;   ("bt" dap-breakpoint-toggle)
  ;;   ("ba" dap-breakpoint-add)
  ;;   ("bd" dap-breakpoint-delete)
  ;;   ("bc" dap-breakpoint-condition)
  ;;   ("bh" dap-breakpoint-hit-condition)
  ;;   ("bl" dap-breakpoint-log-message)
  ;;   ("ee" dap-eval) 
  ;;   ("er" dap-eval-region)
  ;;   ("es" dap-eval-thing-at-point)
  ;;   ("eii" dap-ui-inspect)
  ;;   ("eir" dap-ui-inspect-region)
  ;;   ("eis" dap-ui-inspect-thing-at-point)
  ;;   ("q" nil "quit" :color blue)
  ;;   ("Q" dap-disconnect :color red))
  ;(use-package lsp-python)
#+end_src
** Java
#+begin_src emacs-lisp
  (use-package lsp-java)
  (require 'dap-java)
#+end_src
** ccls
#+begin_src emacs-lisp
  (use-package ccls)
  (require 'ccls)
#+end_src
* Rainbow delimiters
#+begin_src emacs-lisp
  (use-package rainbow-delimiters)
  (rainbow-delimiters-mode)
  (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
  (add-hook 'org-mode-hook #'rainbow-delimiters-mode)

  (let ((rainbow-purple  "#9E1CB2")
        (rainbow-blue  "#1194f6")
        (rainbow-green  "#47B04B")
        (rainbow-yellow  "#FFED18")
        (rainbow-orange  "#E7B500")
        (rainbow-red  "#C90067")
        (rainbow-7  "#00AA5D")
        (rainbow-8  "#FE7380"))
    (set-face-attribute 'rainbow-delimiters-depth-1-face  t :foreground rainbow-purple)
    (set-face-attribute 'rainbow-delimiters-depth-2-face  t :foreground rainbow-green)
    (set-face-attribute 'rainbow-delimiters-depth-3-face  t :foreground rainbow-blue)
    (set-face-attribute 'rainbow-delimiters-depth-4-face  t :foreground rainbow-red)
    (set-face-attribute 'rainbow-delimiters-depth-5-face  t :foreground rainbow-yellow)
    (set-face-attribute 'rainbow-delimiters-depth-6-face  t :foreground rainbow-blue)
    (set-face-attribute 'rainbow-delimiters-depth-7-face  t :foreground rainbow-red)
    (set-face-attribute 'rainbow-delimiters-depth-8-face  t :foreground rainbow-8)
    (set-face-attribute 'rainbow-delimiters-depth-9-face  t :foreground rainbow-purple))
#+end_src
* elisp
** Macroexpand
#+begin_src emacs-lisp
  (use-package macrostep)

  (define-key macrostep-keymap (kbd "C-c C-c") nil)

  (define-key macrostep-keymap (kbd "DEL") nil)
  (define-key macrostep-keymap (kbd "c") nil)
  (define-key macrostep-keymap (kbd "u") nil)
  (define-key macrostep-keymap (kbd "C-c q") #'macrostep-collapse)

  (define-key macrostep-keymap (kbd "RET") nil)
  (define-key macrostep-keymap (kbd "e") nil)
  (define-key emacs-lisp-mode-map (kbd "C-c e") #'macrostep-expand)


  (define-key macrostep-keymap (kbd "n") nil)
  (define-key macrostep-keymap (kbd "C-c C-n") #'macrostep-next-macro)

  (define-key macrostep-keymap (kbd "p") nil)
  (define-key macrostep-keymap (kbd "C-c C-p") #'macrostep-prev-macro)
#+end_src
** auto-highlight-symbol
#+begin_src emacs-lisp
  (use-package auto-highlight-symbol)
  (add-hook 'emacs-lisp-mode-hook
            'auto-highlight-symbol-mode)
#+end_src
* C#
#+BEGIN_SRC emacs-lisp
  (use-package csharp-mode)
  (use-package dotnet)
  (use-package omnisharp
    :bind (:map omnisharp-mode-map
            ([remap xref-find-definitions] . omnisharp-go-to-definition)
            ([remap xref-find-references] . omnisharp-find-usages)))
  (add-hook 'csharp-mode-hook 'omnisharp-mode)
  (add-hook 'csharp-mode-hook 'company-mode)
  (add-hook 'csharp-mode-hook 'flycheck-mode)
  (add-hook 'csharp-mode-hook 'auto-highlight-symbol-mode)
  (add-hook 'csharp-mode-hook 'dotnet-mode)
#+END_SRC
* React js
#+BEGIN_SRC emacs-lisp
  (use-package rjsx-mode)
#+END_SRC
* Golang
#+BEGIN_SRC emacs-lisp
  (use-package go-mode)
  (add-hook 'go-mode-hook
         (lambda ()
           (add-hook 'before-save-hook 'gofmt-before-save nil t)
           (setq indent-tabs-mode nil)))
  ;; This is for lsp to work
  (add-to-list 'exec-path "~/go/bin/")
#+END_SRC
* Elpy
#+BEGIN_SRC emacs-lisp
  (use-package elpy)
  (elpy-enable)
#+END_SRC
* EIN
#+BEGIN_SRC emacs-lisp
  (use-package ein)
  (add-to-list 'exec-path
               "/home/benson/anaconda3/bin/")
#+END_SRC
* Web-mode
#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :commands web-mode
    :init
    (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.cshtml\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
    :config
    (setq web-mode-auto-close-style 2))
#+END_SRC
* Processing
#+BEGIN_SRC emacs-lisp
  (use-package processing-mode)

  (setq processing-location "/usr/bin/processing-java")
#+END_SRC
* Treemacs
#+BEGIN_SRC emacs-lisp
  (use-package treemacs)
#+END_SRC
* Hy-mode
#+begin_src emacs-lisp
  (use-package hy-mode)
#+end_src
* glsl-mode
#+BEGIN_SRC emacs-lisp
  (autoload 'glsl-mode "glsl-mode" nil t)
  (add-to-list 'auto-mode-alist '("\\.glsl\\'" . glsl-mode))
  (add-to-list 'auto-mode-alist '("\\.vert\\'" . glsl-mode))
  (add-to-list 'auto-mode-alist '("\\.frag\\'" . glsl-mode))
  (add-to-list 'auto-mode-alist '("\\.geom\\'" . glsl-mode))
#+END_SRC
* indent-guide 
#+begin_src emacs-lisp
  (use-package indent-guide)
  ;(indent-guide-global-mode)
#+end_src
* rust cargo
#+begin_src emacs-lisp
  (use-package cargo)
#+end_src
* maven support
#+begin_src emacs-lisp
  (use-package mvn)
#+end_src
* Setup-dev-environment
#+begin_src emacs-lisp
  (defun setup-devenv ()
    (interactive)
    (flycheck-list-errors)
    (treemacs)
    (dap-ui-locals)
    (when (y-or-n-p "Enter lsp? ")
      (lsp)))
#+end_src
* skeletor project templates
#+begin_src emacs-lisp
  (use-package skeletor)

  (skeletor-define-template "java-maven"
    :title "Java with Maven")
#+end_src
* Erlang
#+begin_src emacs-lisp
  (use-package erlang)

  (add-to-list 'load-path
               "~/.emacs.d/submodule/erlang_ls/")

  (setq lsp-erlang-server-install-dir "~/.emacs.d/submodule/erlang_ls")

  (defun my/erlang-keymap-hook ()
    (local-set-key (kbd "C-c C-c") 'erlang-compile))

  (add-hook 'erlang-mode-hook 'my/erlang-keymap-hook)
#+end_src
